{% extends 'base-back.html.twig' %}
{% block stylesheets %}
    <style>
        /* Style to remove space between card header and card body */
        .card .card-body {
            padding-top: 0; /* Adjust as needed */
        }

       .round-input,
        #sortingCriteria.form-control {
            border: none;
            border-radius: 15px; /* Adjust border-radius to make it round */
            padding: 8px 12px; /* Adjust padding for smaller size */
            box-shadow: 0 0 5px rgba(19, 103, 200, 1); /* Add initial blue shadow */
            font-weight: bold; /* Set initial font weight */
            transition: box-shadow 0.3s; /* Add transition for smooth effect */
        }

        .round-input:focus,
        #sortingCriteria.form-control:focus {
            font-weight: normal; /* Make text bold on focus */
            box-shadow: 0 0 10px rgba(19, 103, 200, 2.8); /* Increase blue shadow on focus */
        }

        /* Custom styling for sorting select */
        #sortingCriteria.form-control {
            background-color: #f8f9fa; /* Background color */
            border: 1px solid #ced4da; /* Border */
            border-radius: 15px; /* Border radius */
            padding: 8px 12px; /* Padding */
            font-weight: bold; /* Font weight */
            transition: box-shadow 0.3s; /* Transition effect */
        }


 

    </style>
{% endblock %}
{% block title %}Home Admin{% endblock %}

{% block body %}
<div class="content-body">
    <!-- row -->
    <div class="container-fluid">
     <div class="row page-titles mx-0">
        <div class="col-sm-6 p-md-0">
            <div class="welcome-text">
                <h4>List Of Reservations</h4>
            </div>
        </div>
        <div class="col-sm-6 p-md-0 justify-content-sm-end mt-2 mt-sm-0 d-flex">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ path('app_index_admin') }}">Home</a></li>
                <li class="breadcrumb-item active"><a href="#">All Reservations</a></li>
            </ol>
        </div>
    </div>
     <div class="row">
        <div class="col-xl-12 col-xxl-12 col-lg-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">
<button type="button" class="btn btn-sm" style="background-color: #217346; color: #FFFFFF;" onmouseover="this.style.backgroundColor='#4CAF50'" onmouseout="this.style.backgroundColor='#217346'" onclick="exportToExcel()">
    <i class="la la-file-excel-o"></i>
</button>

                    </h4>
                    <input id="searchInput" type="text" name="query" placeholder="Search by UserName..." class="round-input">
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-6">
                        </div>
                    </div>
                    <div class="table-responsive recentOrderTable">
                        <table id="reservationsTable" class="table verticle-middle table-responsive-md">
                            <thead>
                                <tr>
                                    <th scope="col">Event Image</th>
                                    <th scope="col">Event Name</th>
                                    <th scope="col">UserName</th>
                                    <th scope="col">Reserved Places </th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for reservation in pagination %}
                                <tr>
                                    <td><img class="img-fluid" src="{{ asset('uploads/' ~ reservation.Imagesrc) }}" style="height: 80px;"></td>
                                    <td><h4>{{ reservation.namee}}</h4></td>
                                    <td>{{ reservation.iduser.name ?? 'Unknown User' }}</td>
                                    <td>{{ reservation.nbPlaces  }}</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger delete-btn" onclick="generatePDF({{ reservation.id }})"><i class="la la-file-pdf-o"></i></button>
                                        <a href="{{ path('show_resB', {'id': reservation.id}) }}" class="btn btn-sm btn-primary"><i class="la la-eye"></i></a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    <div id="emptyResult" style="display: none; text-align: center;">
                        <p>No results found.</p>
    <img src="{{ asset('img/error_search.png') }}" alt="Error Image">
</div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="pagination-container">
    {% include '@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig' with {'pagination': pagination} %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('searchInput');
    const allRows = document.querySelectorAll('#reservationsTable tbody tr'); // Get all table rows
    const emptyResultDiv = document.getElementById('emptyResult'); // Get the empty result div

    function performSearch() {
        const query = searchInput.value.trim().toLowerCase(); // Convert the query to lowercase for case-insensitive search
        let hasResults = false; // Flag to check if any result is found

        allRows.forEach(row => {
            const userNameCell = row.querySelector('td:nth-child(3)'); // Get the third cell (User Name)

            if (userNameCell) {
                const text = userNameCell.textContent.trim().toLowerCase(); // Get the text content of the cell and convert to lowercase

                // Show or hide the row based on search result
                if (text.startsWith(query)) {
                    row.style.display = '';
                    hasResults = true; // Set flag to true if a result is found
                } else {
                    row.style.display = 'none';
                }
            }
        });

        // Show or hide the empty result div based on the flag
        emptyResultDiv.style.display = hasResults ? 'none' : '';
    }

    searchInput.addEventListener('input', performSearch);
});

</script>

<script>
function generatePDF(reservationId) {
    // Make an AJAX request to generate the PDF
    var pdfUrl = '/reservation/' + reservationId + '/pdf';
    var xhr = new XMLHttpRequest();
    xhr.open('GET', pdfUrl, true);
    xhr.responseType = 'blob'; // Set response type to blob
    xhr.onload = function () {
        if (xhr.status === 200) {
            // Create a blob URL from the response data
            var blob = new Blob([xhr.response], { type: 'application/pdf' });
            var pdfUrl = window.URL.createObjectURL(blob);

            // Dynamically generate QR code image
            var qrCodeUrl = '/reservation/' + reservationId + '/generate-qr';
            var qrCodeImg = document.createElement('img');
            qrCodeImg.src = qrCodeUrl;
            qrCodeImg.alt = 'QR code';

            // Create a link element and click it to trigger download
            var a = document.createElement('a');
            a.href = pdfUrl;
            a.download = 'reservation_' + reservationId + '.pdf'; // Set the file name
            document.body.appendChild(a);
            a.click();

            // Clean up by revoking object URLs
            window.URL.revokeObjectURL(pdfUrl);
        }
    };
    xhr.send();
}
</script>

<script>
function exportToExcel() {
    // Make an AJAX request to fetch reservation data
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '{{ path('export_reservations_excel') }}', true);
    xhr.responseType = 'blob'; // Set response type to blob
    xhr.onload = function () {
        if (xhr.status === 200) {
            // Create a blob URL from the response data
            var blob = new Blob([xhr.response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            var excelUrl = window.URL.createObjectURL(blob);

            // Create a link element and click it to trigger download
            var a = document.createElement('a');
            a.href = excelUrl;
            a.download = 'reservations.xlsx'; // Set the file name
            document.body.appendChild(a);
            a.click();

            // Clean up by revoking object URLs
            window.URL.revokeObjectURL(excelUrl);
        }
    };
    xhr.send();
}
</script>


{% endblock %}